proc_summary <- summarize_ind(data_proc)
proc_summary
proc_summary %>% colnames
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
## Create summary row for each subject
## TODO: join survey data
load_and_summarize_proc(ind_input_dir, summary_output_dir, data_type = "task")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
?left_join
source("~/proj/navon/analysis/lib/load_process/load_process.R")
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.align = "center", fig.width = 9,
fig.height = 6, results = "asis")
options(knitr.kable.NA = "")
cli.progress_show_after <- 0
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
# Chunk 2: lib
library(here)
# library(tidyverse)
library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(cli) # For printing error messages
library(glue) # To make writing error message strings easier
source(here::here("lib", "load_process", "load_process.R"))
# Chunk 3: load_process_task
data_dir <- here::here("data")
input_dir <- here::here(data_dir, "input_0pt5")
proc_dir <- here::here(data_dir, "proc_0pt5")
## If data have been processed already, set to FALSE
reprocess_task_data <- FALSE
if (reprocess_task_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "task")
}
# Chunk 4: debug_load
# data_type <- "task"
# pattern <- "*.iqdat"
# input_files <- get_input_paths(input_dir, data_type, pattern)
# input_files
# n_input_files <- length(input_files)
# n_input_files
# input_path <- input_files[5] ## this will be in a loop
# input_path
# data_raw <- load_raw(input_path, data_type)
# data_raw
# subject_id <- data_raw$subject %>% first() %>% as.character()
# subject_id
#
# data_recoded <- recode_raw(data_raw, data_type)
# data_recoded
#
# data_recoded %>%
#   select(stimulus_left, stimulus_right, target, level, field)
#
# data_cleaned <- clean_recoded(data_recoded, data_type)
# data_cleaned
# data_cleaned %>% select(block_type, block_response, blocknum, target, level, field)
#
# data_cleaned %>% data_tests(data_type)
# Chunk 5: load_process_surveys
reprocess_ehi_data <- FALSE
if (reprocess_ehi_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "ehi")
}
#TODO: Process demographic, end question data
reprocess_demographics_data <- FALSE
if (reprocess_demographics_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "demographics")
}
reprocess_end_data <-FALSE
if (reprocess_end_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "end")
}
# Chunk 6: debug_survey
# ## For testing: step through load_and_process for an individual input file
# data_type <- "demographics"
# input_files <- get_input_paths(input_dir, data_type)
# input_files
# n_input_files <- length(input_files)
# n_input_files
# input_path <- input_files[1] ## todo: make this a loop
# input_path
# data_raw <- load_raw(input_path, data_type)
# data_raw
# subject_id <- data_raw$subject %>% first() %>% as.character()
# subject_id
# data_recoded <- recode_raw(data_raw, data_type)
# data_recoded
# data_cleaned <- clean_recoded(data_recoded, data_type)
# data_cleaned
# data_cleaned$ehi_total
# data_tests(data_cleaned, data_type)
# save_cleaned(data_cleaned, proc_dir, data_type)
## Load processed data
ind_input_dir <- here(proc_dir, "individual")
summary_output_dir <- here(proc_dir, "summary")
## Create summary row for each subject
## TODO: join survey data
load_and_summarize_proc(ind_input_dir, summary_output_dir, data_type = "task")
ga
## If data have been processed already, set to FALSE
reprocess_task_data <- TRUE
if (reprocess_task_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "task")
}
# ## For testing: step through load_and_process for an individual input file
data_type <- "demographics"
p
p
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files
input_path <- input_files[1] ## todo: make this a loop
input_path
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[1] ## todo: make this a loop
input_path
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_raw <- load_raw(input_path, data_type)
data_raw
input_path
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[1] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
View(data_raw)
View(data_raw)
spec(data_raw)
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_raw <- load_raw(input_path, data_type)
data_raw
subject_id <- data_raw$subject %>% first() %>% as.character()
subject_id
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_raw
data_raw %>% select(-contains("latency"))
colnames(data_raw) <-gsub("_response","",colnames(data_raw))
data_raw
data_raw %>%
## remove all latency measures
select(-contains("latency"))
data_raw %>%
## remove all latency measures, and trim columns
select(-ends_with("latency"),
-date,
-time,
-group,
-session,
-build) %>%
rename_with(trim_end, ends_with("response"))
View(data_raw)
View(data_raw)
data_raw <- data_raw %>%
## remove all latency measures, and trim columns
select(-ends_with("latency"),
-date,
-time,
-group,
-session,
-build) %>%
rename_with(trim_end, ends_with("response"))
## remove "response" suffix
data_raw
View(data_raw)
input_path <- input_files[3] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
colnames(data_raw) <-gsub("_response","",colnames(data_raw))
data_raw <- data_raw %>%
## remove all latency measures, and trim columns
select(-ends_with("latency"),
-date,
-time,
-group,
-session,
-build) %>%
rename_with(trim_end, ends_with("response"))
## remove "response" suffix
data_raw
View(data_raw)
data_raw <- data_raw %>%
## remove all latency measures, and trim columns
select(-ends_with("latency"),
-date,
-time,
-group,
-session,
-build) %>%
rename_with(trim_end, ends_with("response"))
data_raw
data_raw <- load_raw(input_path, data_type)
data_raw
data_raw <- data_raw %>%
## remove all latency measures, and trim columns
select(-ends_with("latency"),
-date,
-time,
-group,
-session,
-build) %>%
rename_with(trim_end, ends_with("response"))
# ## For testing: step through load_and_process for an individual input file
data_type <- "demographics"
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[3] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
data_raw <- data_raw %>%
## remove all latency measures, and trim columns
select(-ends_with("latency"),
-date,
-time,
-group,
-session,
-build) %>%
rename_with(trim_end, ends_with("response"))
## remove "response" suffix
data_raw
## remove "response" suffix
data_raw
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with"race")
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race")
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race"))
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race"))
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race") %>% slice(1)
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race") %>% slice(1)
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race") %>% slice(1)
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race")) %>% slice(1)
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race")) %>% slice(1)
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race")) %>% slice(1) %>% unlist()
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race")) %>% as.numeric()
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
data_raw %>% select(starts_with("race")) %>% as.character()
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
test <- data_raw %>% select(starts_with("race")) %>% as.character()
test
test[[1]]
test[[6]]
test %>% count(!="NA")
test %>% str_count("NA")
test %>% str_count(!"NA")
test %>% !str_count("NA")
test2 <- test %>% str_count("NA")
!test2
test2 <- test %>% str_count("NA") %>% .!
test2 <- test %>% str_count("NA") %>% isFALSE()
test2
test2 <- test %>% str_count("NA")
test2
which(race_answers == "NA")
## Put all race responses in a vector
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
race_answers <- data_raw %>% select(starts_with("race")) %>% as.character()
which(race_answers == "NA")
which(race_answers != "NA")
## If there is only one, code race as that race
race_answers
## If there is more than one, code as "multiple races"
which(race_answers != "NA")
if (length(answer_indices) == 1) {
print("yesy")
}
## If there is only one, code race as that race
answer_indices <- which(race_answers != "NA")
if (length(answer_indices) == 1) {
print("yesy")
}
race <- race_answers[[answer_indices]]
race
data_raw
data_raw %>% select(-starts_with("race"))
## If there is only one, code race as that race
## If there is more than one, code as "multiple races"
answer_indices <- which(race_answers != "NA")
if (length(answer_indices) == 1) {
race_recoded <- race_answers[[answer_indices]]
} else if (length(answer_indices > 1)) {
race_recoded <- "Multiple"
}
data_raw %>%
select(-starts_with("race")) %>%
murate(race = race_recoded)
data_raw %>%
select(-starts_with("race")) %>%
mutate(race = race_recoded)
data_raw <- data_raw %>%
select(-starts_with("race")) %>%
mutate(race = race_recoded) %>%
select(-sex_other, -education_other)
data_raw <- data_raw %>%
select(-starts_with("race")) %>%
mutate(race = race_recoded) %>%
select(-sex_other, -educationother)
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
# ## For testing: step through load_and_process for an individual input file
data_type <- "demographics"
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[3] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
subject_id <- data_raw$subject %>% first() %>% as.character()
subject_id
data_recoded <- recode_raw(data_raw, data_type)
data_recoded
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_recoded <- recode_raw(data_raw, data_type)
data_recoded
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_cleaned <- clean_recoded(data_recoded, data_type)
data_cleaned
data_tests(data_cleaned, data_type)
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
save_cleaned(data_cleaned, proc_dir, data_type)
#TODO: Process demographic, end question data
reprocess_demographics_data <- TRUE
if (reprocess_demographics_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "demographics")
}
problems()
# ## For testing: step through load_and_process for an individual input file
data_type <- "demographics"
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[1] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
subject_id <- data_raw$subject %>% first() %>% as.character()
subject_id
data_recoded <- recode_raw(data_raw, data_type)
data_recoded
data_cleaned <- clean_recoded(data_recoded, data_type)
data_cleaned
data_tests(data_cleaned, data_type)
save_cleaned(data_cleaned, proc_dir, data_type)
# ## For testing: step through load_and_process for an individual input file
data_type <- "demographics"
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[2] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
data_raw <- load_raw(input_path, data_type)
problems()
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_raw <- load_raw(input_path, data_type)
problems()
data_raw
#TODO: Process demographic, end question data
reprocess_demographics_data <- TRUE
if (reprocess_demographics_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "demographics")
}
# ## For testing: step through load_and_process for an individual input file
input_dir
# ## For testing: step through load_and_process for an individual input file
data_type <- "end"
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[2] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
input_path
data_raw <- load_raw(input_path, data_type)
input_path
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_raw <- load_raw(input_path, data_type)
data_raw
data_raw %>% select(subject, task_experience_response,
task_experience_other_response,
open_ended_feedback_response)
source("~/proj/navon/analysis/lib/load_process/load_process.R")
source("~/proj/navon/analysis/lib/load_process/load_process.R")
reprocess_end_data <- TRUE
if (reprocess_end_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "end")
}
# ## For testing: step through load_and_process for an individual input file
data_type <- "end"
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[2] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
subject_id <- data_raw$subject %>% first() %>% as.character()
subject_id
data_recoded <- recode_raw(data_raw, data_type)
data_recoded
# ## For testing: step through load_and_process for an individual input file
data_type <- "end"
input_files <- get_input_paths(input_dir, data_type)
input_files
n_input_files <- length(input_files)
n_input_files
input_path <- input_files[2] ## This will be in s a loop
input_path
data_raw <- load_raw(input_path, data_type)
data_raw
subject_id <- data_raw$subject %>% first() %>% as.character()
subject_id
data_recoded <- recode_raw(data_raw, data_type)
data_recoded
data_raw
data_recoded <- recode_raw(data_raw, data_type)
data_recoded
source("~/proj/navon/analysis/lib/load_process/load_process.R")
data_recoded <- recode_raw(data_raw, data_type)
data_recoded
data_cleaned <- clean_recoded(data_recoded, data_type)
data_cleaned
if (reprocess_end_data == TRUE) {
load_and_process(input_dir, proc_dir, data_type = "end")
}
