labs(title = "LVF>RVF GLobal Bias (RT)", x = "Level", y = "RVF-LVF, Local - Global RT (ms)")
g <- g |> gg_style_means() |> gg_color() +
theme(axis.text.x = element_blank(), aspect.ratio = 4/1)
g2 <- g
g1 + g2
g1 + plot_spacer() + g2 + plot_layout(widths = c(4, 0, 4))
g1 + plot_spacer() + g2 + plot_layout(widths = c(4, 0, 4))
g1 + g2
g <- ggplot(rt_1, aes(
x = all_one_group,
y = LVF_Global_Bias,
fill = plot_colors[[3]],
color = plot_colors[[3]]
)) +
geom_quasirandom(alpha = .1, show.legend = F) +
geom_boxplot(
alpha = 0.5,
size = 0.3,
varwidth = F,
outlier.shape = NA,
color = "gray20",
show.legend = F
) +
stat_summary(
fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.95),
geom = "errorbar",
position = "dodge",
linetype = 1,
color = "gray5",
width = .2,
# size = point_size / 5,
show.legend = F
) +
geom_point(
data = rt_descriptive,
aes(y = mean),
color = "black",
shape = 21,
show.legend = F
) +
scale_y_continuous(minor_breaks = seq(-500 , 500, 50),
breaks = seq(-500, 500, 100)) +
theme(axis.text.x = element_blank()) +
labs(title = "LVF>RVF Global Bias (RT)", x = "Level", y = "RVF-LVF, Local - Global RT (ms)")
g <- g |> gg_style_means() |> gg_color() +
theme(axis.text.x = element_blank(), aspect.ratio = 4/1)
g2 <- g
g1 + g2
g1 + plot_spacer() + g2 + plot_layout(widths = c(4, 0, 4))
g1 + g2
g1 + plot_spacer() + g2 + plot_layout(widths = c(4, 0, 4))
g1 + (g2 + theme(plot.margin = c(0, 0, 0, 1))
g1 + plot_spacer() + g2 + plot_layout(widths = c(4, 0, 4))
g1 + (g2 + theme(plot.margin = c(0, 0, 0, 1)))
g1 + (g2 + theme(plot.margin = unit(c(0, 0, 0, 1)))
g1 + plot_spacer() + g2 + plot_layout(widths = c(4, 0, 4))
g1 + (g2 + theme(plot.margin = unit(c(0, 0, 0, 1))
g1 + (g2 + theme(plot.margin = unit(c(0, 0, 0, 1))))
g2 + theme(plot.margin = unit(c(0, 0, 0, 1)))
g2 + theme(plot.margin = unit(c(0, 0, 0, 1), "pts"))
g2 + theme(plot.margin = unit(c(0, 0, 0, 1), "pt"))
g1 + (g2 + theme(plot.margin = unit(c(0, 0, 0, 0))))
g2 + theme(plot.margin = unit(c(0, 0, 0, 0), "pt"))
g2 + theme(plot.margin = unit(c(5.5, 5.5, 5.5, 5.5), "pt"))
g2_padded <- g2 + theme(plot.margin = unit(c(5.5, 5.5, 5.5, 5.5), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(5.5, 5.5, 5.5, 11), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(5.5, 5.5, 5.5, 5.5), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 5.5, 5.5, 5.5), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 5.5, 5.5, 11), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 5.5, 5.5, 50), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 5.5, 50, 50), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 50, 5.5, 50), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 20, 5.5, 20), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 30, 5.5, 30), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 50, 5.5, 30), "pt"))
g1 + g2_padded
g2_padded <- g2 + theme(plot.margin = unit(c(10, 50, 5.5, 40), "pt"))
g1 + g2_padded
g1 + g2_padded + plot_annotation("test")
g1 + g2_padded + plot_annotation("test") + theme(plot.tag.position = "bottom"))
g1 + g2_padded + plot_annotation("test") & theme(plot.tag.position = "bottom"))
g1 + g2_padded + plot_annotation("test") & theme(plot.tag.position = "bottom")
g1 + g2_padded + plot_annotation("test") & theme(plot.tag.position= c(1, 0))
g1 + g2_padded + plot_annotation("test") & theme(plot.tag.position= c(1, 1))
g1 + g2_padded + plot_annotation(caption = "test") & theme(plot.tag.position= c(1, 1))
g2_padded <- g2 + theme(plot.margin = unit(c(10, 50, 5.5, 40), "pt"))
g_both <- g1 + g2_padded
g_both
fig_path_g4 <- here(fig_dir, "rt_1_subjects.png")
if (use_cached_rtfigs == FALSE) {
## Make a table showing:
## For each subject and field, the difference in median rt for:
## Global - Local
rt_1 <- rt_subject |>
pivot_wider(names_from = c(field, level),
values_from = rt) |>
mutate(LVF_Global_Bias = (RVF_Global - RVF_Local) - (LVF_Global - LVF_Local)) |>
mutate(all_one_group = "all_one_group")
rt_descriptive <- rt_1 |>
group_by(all_one_group) |>
summarize(
median = median(LVF_Global_Bias),
mean = mean(LVF_Global_Bias),
SE = sd(LVF_Global_Bias) / sqrt(length((LVF_Global_Bias)))
)
rt_descriptive
g <- ggplot(rt_1, aes(
x = all_one_group,
y = LVF_Global_Bias,
fill = plot_colors[[3]],
color = plot_colors[[3]]
)) +
geom_quasirandom(alpha = .1, show.legend = F) +
geom_boxplot(
alpha = 0.5,
size = 0.3,
varwidth = F,
outlier.shape = NA,
color = "gray20",
show.legend = F
) +
stat_summary(
fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.95),
geom = "errorbar",
position = "dodge",
linetype = 1,
color = "gray5",
width = .2,
# size = point_size / 5,
show.legend = F
) +
geom_point(
data = rt_descriptive,
aes(y = mean),
color = "black",
shape = 21,
show.legend = F
) +
scale_y_continuous(minor_breaks = seq(-500 , 500, 50),
breaks = seq(-500, 500, 100)) +
theme(axis.text.x = element_blank()) +
labs(title = "LVF>RVF Global Bias (RT)", x = "Level", y = "RVF-LVF, Local - Global RT (ms)")
g <- g |> gg_style_means() |> gg_color() +
theme(axis.text.x = element_blank(), aspect.ratio = 4/1)
ggsave(fig_path_g4, g, "png", height = 4, width = 4)
g4 <- g
}
#include_graphics(fig_path_g4)
fig_path_g3 <- here(fig_dir, "rt_2_subjects.png")
if (use_cached_rtfigs == FALSE) {
## Make a table showing:
## For each subject and field, the difference in median rt for:
## Global - Local
rt_2 <- rt_subject |>
pivot_wider(names_from = c(level),
values_from = rt) |>
mutate(Global_Bias = Local - Global)
rt_descriptive <- rt_2 |>
group_by(field) |>
summarize(
median = median(Global_Bias),
mean = mean(Global_Bias),
SE = sd(Global_Bias) / sqrt(length((Global_Bias)))
)
g <- ggplot(rt_2, aes(x = field,
y = Global_Bias, color)) +
geom_quasirandom(
alpha = .1, show.legend = F,
color = plot_color) +
geom_boxplot(
alpha = 0.5,
size = 0.3,
varwidth = F,
outlier.shape = NA,
fill = plot_color,
color = "gray20",
show.legend = F
) +
stat_summary(
fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.95),
geom = "errorbar",
position = "dodge",
linetype = 1,
color = "gray5",
width = .2,
show.legend = F
) +
geom_point(
data = rt_descriptive,
aes(y = mean),
fill = plot_color,
shape = 21,
show.legend = F
) +
scale_y_continuous(minor_breaks = seq(-500 , 500, 50),
breaks = seq(-500, 500, 100)) +
labs(title = "Global bias (RT)", x = "Level", y = "Local - Global RT (ms)")
g <- g |> gg_style_means()
ggsave(fig_path_g3, g, "png", height = 4, width = 4)
g3 <- g
}
#include_graphics(fig_path_g3)
fig_path_g34 <- here(fig_dir, "rt_2_both.png")
if (use_cached_rtfigs == FALSE) {
g4_padded <- g4 + theme(plot.margin = unit(c(10, 50, 5.5, 40), "pt"))
g_both <- g3 + g4_padded
ggsave(fig_path_g34, g_both, "png", height = 4, width = 8)
}
include_graphics(fig_path_g34)
g_both
g_234 <- g2 + g3 + g4
g_234
g2
## Plot data from every trial, with overall mean, median and bounds.
fig_path_g1 <- here(fig_dir, "rt_4_all.png")
if (use_cached_rtfigs == FALSE) {
aah_correct <- aah |> filter(correct == T) |>
mutate(level = recode(level, global = "Global", local = "Local"))
rt_descriptive <- aah_correct |>
group_by(field, level) |>
summarize(
median = median(rt),
mean = mean(rt),
SE = sd(rt) / sqrt(length((rt)))
)
## Facet by: Visual field
g <- ggplot(aah_correct, aes(
x = level,
y = rt,
fill = level,
color = level
)) +
geom_quasirandom(alpha = .05, show.legend = F) +
geom_boxplot(
alpha = 0.5,
size = 0.3,
varwidth = F,
outlier.shape = NA,
color = "gray20",
show.legend = F
) +
stat_summary(
fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.95),
geom = "errorbar",
position = "dodge",
linetype = 1,
color = "gray5",
width = .3,
# size = point_size / 5,
show.legend = F
) +
geom_point(data = rt_descriptive, aes(y = mean), color = "black", shape = 21,
show.legend = F) +
scale_y_continuous(minor_breaks = seq(0 , 2000, 100),
breaks = seq(0, 2000, 200)) +
facet_wrap(~ field) +
labs(title = "All trials (RT)", x = "Level", y = "Reaction time (ms)")
g <- g |> gg_style_means() |> gg_color()
ggsave(fig_path_g1, g, "png", height = 4, width = 4)
g1 <- g
}
#include_graphics(fig_path_g1)
fig_path_g2 <- here(fig_dir, "rt_4_subjects.png")
if (use_cached_rtfigs == FALSE) {
rt_subject <- aah_correct |> group_by(subject, field, level) |>
summarize(rt = median(rt))
rt_descriptive <- rt_subject |>
group_by(field, level) |>
summarize(
median = median(rt),
mean = mean(rt),
SE = sd(rt) / sqrt(length((rt)))
)
g <- ggplot(rt_subject, aes(
x = level,
y = rt,
fill = level,
color = level
)) +
geom_quasirandom(alpha = .1, show.legend = F) +
geom_boxplot(
alpha = 0.5,
size = 0.3,
varwidth = F,
outlier.shape = NA,
color = "gray20",
show.legend = F
) +
stat_summary(
fun.data = mean_cl_normal,
fun.args = list(conf.int = 0.95),
geom = "errorbar",
position = "dodge",
linetype = 1,
color = "gray5",
width = .2,
# size = point_size / 5,
show.legend = F
) +
geom_point(
data = rt_descriptive,
aes(y = mean),
color = "black",
shape = 21,
show.legend = F
) +
scale_y_continuous(minor_breaks = seq(0 , 1500, 100),
breaks = seq(0, 1500, 200)) +
facet_wrap( ~ field) +
labs(title = "Per-subject medians (RT)", x = "Level", y = "Reaction time (ms)")
g <- g |>  gg_style_means() |> gg_color()
ggsave(fig_path_g2, g, "png", height = 4, width = 4)
g2 <- g
}
#include_graphics(fig_path_g2)
fig_path_g12 <- here(fig_dir, "rt_4_both.png")
if (use_cached_rtfigs == FALSE) {
g_both <- g1 + g2
ggsave(fig_path_g12, g_both, "png", height = 4, width = 8)
}
include_graphics(fig_path_g12)
g2
g_234 <- g2 + g3 + g4
g_234
g_234
g2
g3
g_234 <- g2 + g3 + g4 = plot_layout(widths = c(2, 1, 1))
g_234 <- g2 + g3 + g4 = plot_layout(widths = c(2, 1, 1))
g_234 <- g2 + g3 + g4 + plot_layout(widths = c(2, 1, 1))
g_234
g_234 <- g2 + g3 + g4 + plot_layout(widths = c(4, 2, 1))
g_234
g_234 <- g2 + g3 + g4_padded + plot_layout(widths = c(4, 2, 1))
g_234
g4_padded <- g4 + theme(plot.margin = unit(c(10, 40, 5.5, 40), "pt"))
g_both <- g3 + g4_padded
g_34 <- g3 + g4_padded
g34
g_34
g2 + g_34
g_234 <- g2 + g3 + g4_padded + plot_layout(widths = c(4, 2, 1), heights = 1, 1, 1)
g_234
g_234 <- g2 + g3 + g4_padded + plot_layout(widths = c(4, 2, 1), heights = c(1, 1, 1))
g_234
g_234 <- g2 + g3 + g4_padded + plot_layout(widths = c(4, 2, 1), heights = c(4, 4, 4))
g_234
g_234 <- g2 + g3 + g4_padded + plot_layout(widths = c(4, 2, 1))
g_234
g_234 <- g2 + g3 + g4_padded + plot_layout(widths = c(4, 2, 1))
g_234
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.align = "center", fig.width = 9,
fig.height = 6, results = "asis")
options(knitr.kable.NA = "")
cli.progress_show_after <- 0
## Do not use scientific notation until 9 decimal places.
options(scipen = 9, digits = 9)
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
# Chunk 2
library(here)
library(tidyverse)
library(cli) # For printing error messages
library(lme4)
rt_emm
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
fig.align = "center", fig.width = 9,
fig.height = 6, results = "asis")
options(knitr.kable.NA = "")
cli.progress_show_after <- 0
## Do not use scientific notation until 9 decimal places.
options(scipen = 9, digits = 9)
# Suppress summarise info
options(dplyr.summarise.inform = FALSE)
library(here)
library(tidyverse)
library(cli) # For printing error messages
library(lme4)
library(emmeans)
# library(broom)
library(gt)
# library(ggpubr) ## functions for plotting SD, SEM, CI.
# library(ggbeeswarm)
# library(patchwork)
library(knitr) # For include_graphics
source(here::here("lib", "load_process", "load_process.R"))
source(here::here("lib", "util.R"))
source(here::here("lib", "demographics.R"))
data_dir <- here::here("data")
proc_dir <- here::here(data_dir, "proc_pilot")
cache_dir <- here::here("manual_cache", "pilot")
## TODO: specify cache for models from each script version:
## pilot, main experiment
## (Each will have its own "rt_emm.rds", for example)
use_cached_model_rt <- TRUE
use_cached_model_acc <- TRUE
use_cached_model_rt_ehi <- TRUE
use_cached_model_acc_ehi <- TRUE
## Load "the data" with all subjects & trials.
aah_long <- load_aah_long(proc_dir)
## Load summary data table (for quick demographic analyses)
## with all subjects.
aah_summary_all <- load_aah_summary(proc_dir)
#### PREPARE SUMMARY DATA FOR DEMOGRAPHICS ANALYSES
aah_summary <- filter_aah_summary_for_analysis(aah_summary_all)
#### PREPARE TRIAL-LEVEL DATA FOR RT, ACCURACY ANALYSES
## Prepare "the data" (aah_long) for all analyses:
## Filter out practice trials, absent trials, and excluded subjects
## This data (all present trials, correct or incorrect) will be used for
## accuracy analyses
aah <- filter_aah_long_for_analysis(aah_long)
## For RT analyses, prepare dataset with only correct, present trials.
## In our RT model, we only care about correct responses to present trials.
aah_correct <- aah |> filter(correct == T)
## Relevel field and level with RVF first (unintuitive for plotting),
## so that emmeans will show a positive number for LVF global bias.
aah_for_rt_model <- aah_correct |>
mutate(level = level |> factor(levels = c("Global", "Local")),
field = field |> factor(levels = c("RVF", "LVF")))
## For accuracy analyses, prepare dataset will all present trials.
## Relevel field and level,
## so that emmeans will show a positive number for LVF global bias.
aah_for_acc_model <- aah |>
mutate(level = level |> factor(levels = c("Global", "Local")),
field = field |> factor(levels = c("RVF", "LVF")))
rt_demo <- demo_summary_table(aah_summary)
rt_demo |> pretty_table() |> tab_header(title = "Demographics", subtitle = "Summary")
## Make a linear model using data from every trial.
## Fixed effects: field, level (and their interaction)
## Random effects: subject.
## rt ~ field + level + field:level + (1 | subject)
rt_model <- lmer(rt ~ field:level + field + level + (1 | subject), data = aah_for_rt_model)
if (use_cached_model_rt == FALSE) {
## Create emmeans model object, and manually cache it.
rt_emm <- emmeans(rt_model, ~ field * level, pbkrtest = 13184)
## Manually cache model
saveRDS(rt_emm, here(cache_dir, "rt_emm.rds"))
} else if (use_cached_model_rt == TRUE) {
## Load cached model
rt_emm <- readRDS(here("manual_cache", "rt_emm.rds"))
}
rt_emm
## Use emmeans() to test 2-way interaction.
rt_interaction_emm <- rt_emm |>
contrast(interaction = c("consec")) |>
summary(infer = T)
#rt_interaction_emm
rt_interaction_emm |>
as_tibble() |>
format_p.value() |>
pretty_table() |>
tab_header(title = "Field by level interaction (RT)",
subtitle = "Compare effect estimate to zero with emmeans()") |>
tab_footnote(footnote = "A positive number means global bias is stronger in LVF (as predicted for right handers)",
locations = cells_column_labels(columns = estimate)) |>
tab_footnote(footnote = "Two-sided",
locations = cells_column_labels(columns = p.value)) |>
tab_footnote(footnote = "Confidence level: 95%",
locations = cells_column_labels(columns = lower.CL)) |>
tab_footnote(footnote = "Degrees-of-freedom method: kenward-roger",
locations = cells_column_labels(columns = df))
## Make a binomial logistic model using data from every trial.
## Fixed effects: field, level (and their interaction)
## Random effects: subject.
## correct ~ field + level + field:level + (1 | subject)
acc_model <- glmer(correct ~ field:level + field + level + (1 | subject),
data = aah,
family = "binomial")
## Manually cache model
saveRDS(acc_emm, here("manual_cache", "acc_emm.rds"))
## Create emmeans model object, and manually cache it.
acc_emm <- emmeans(acc_model, ~ field * level)
## Manually cache model
saveRDS(acc_emm, here("manual_cache", "acc_emm.rds"))
## Load cached model
acc_emm <- readRDS(here("manual_cache", "acc_emm.rds"))
## Is there an interaction of field x level?
## Use an emmeans contrast
acc_interaction_emm <- acc_emm |>
contrast(interaction = c("consec")) |>
summary(infer = T, type = "response")
#acc_interaction_emm
acc_interaction_emm |>
as_tibble() |>
format_p.value() |>
pretty_table() |>
tab_header(title = "Field by level interaction (Accuracy)",
subtitle = "Compare effect estimate to zero with emmeans()") |>
tab_footnote(footnote =  "Backtransformed to odds ratio from log odds ratio (tests are performed on log odds ratio scale). A ratio > 1 means global bias is stronger in the LVF, as predicted for right handers.",
locations = cells_column_labels(columns = odds.ratio)) |>
tab_footnote(footnote = "I don't understand why df is 'Inf' here, but I think it is expected when emmeans does logistic regression. See emmeans FAQ: https://cran.r-project.org/web/packages/emmeans/vignettes/FAQs.html#asymp.",
locations = cells_column_labels(columns = df)) |>
tab_footnote(footnote = "Confidence level: 95%",
locations = cells_column_labels(columns = asymp.LCL)) |>
tab_footnote(footnote = "Two-sided",
locations = cells_column_labels(columns = p.value))
