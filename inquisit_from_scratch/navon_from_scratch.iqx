// Workflow (https://www.rondotsch.nl/inquisit-tutorial/)
// Define stim
//    32 target-present
// 	  8  target-absent
// Define instructions and prompts
//	  General instructions
//	  response-specific instructions ("/")
//	  response-specific instructions ("z")
// Define trial types (what stim are presented? Which responses are valid/correct?)
//	  instructions (keys for next, previous)
//    practice target-present ("/")
//	  practice target-absent ("/")
//	  main target-present ("/")
//    main target-absent ("/")
//    practice target-present ("z")
//	  practice target-absent ("z")
//	  main target-present ("z")
//    main target-absent ("z")
// Define blocks, and instructions for each block
//	  General instructions
//	  response-specific instructions ("/")
//    practice block ("/") (12 t-p, 4 t-a)
//	  main block ("/") (32 t-p, 8 t-a, times 2) 
//	  response-specific instructions ("z")
//    practice block ("z") (12 t-p, 4 t-a)
//	  main block ("z") (32 t-p, 8 t-a, times 2)
// Experiment loop. Define order of blocks

// User-specified variables // TODO: move to config
<parameters>
/ background_color = white
/ foreground_color = black
/ fontfamily_default = "Avenir Next"
/ fontsize_default = 5% // Change to 14pt?
/ fontsize_fixation = 10%
/ iti = 2000
/ fixation_duration = 600
/ shape_duration = 134
/ blank_duration = 256
/ mask_duration = 134
/ timeout = 2600 // Maximum response time
/ feedback_duration = 500
</parameters>

<defaults>
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_default)
/ screencolor = parameters.background_color
// txcolor = parameters.foreground_color
/ txbgcolor = parameters.background_color
</defaults>

<expressions>
/ fixation_onset = 0
/ shape_onset = parameters.fixation_duration
/ blank_onset = parameters.fixation_duration + parameters.shape_duration
/ mask_onset = parameters.fixation_duration + parameters.shape_duration + parameters.blank_duration
/ iti_onset = parameters.fixation_duration + parameters.shape_duration + parameters.blank_duration + parameters.mask_duration
</expressions>


//  Define stim
//    32 target-present
// 	  8  target-absent
<text stim_practice_present> // TODO replace placeholder
/ items = stim_practice_present
</text>
<item stim_practice_present>
/ 1 = "    1TARGET PRESENT   "
/ 2 = "    2TARGET PRESENT   "
/ 3 = "    3TARGET PRESENT   "
/ 4 = "    4TARGET PRESENT   "
/ 5 = "    5TARGET PRESENT   "
/ 6 = "    6TARGET PRESENT   "
/ 7 = "    7TARGET PRESENT   "
/ 8 = "    8TARGET PRESENT   "
/ 9 = "    9TARGET PRESENT   "
/10 = "    10TARGET PRESENT   "
/11 = "    11TARGET PRESENT   "
/12 = "    12TARGET PRESENT   "
</item>

<text stim_practice_absent> // TODO replace placeholder
/ items = stim_practice_absent
</text>
<item stim_practice_absent>
/ 1 = "    aTARGET ABSENT    "
/ 2 = "    bTARGET ABSENT    "
/ 3 = "    cTARGET ABSENT    "
/ 4 = "    dTARGET ABSENT    "
/ 5 = "    eTARGET ABSENT    "
/ 6 = "    fTARGET ABSENT    "
/ 7 = "    gTARGET ABSENT    "
/ 8 = "    hTARGET ABSENT    "
</item>

<text stim_main_present> // TODO replace placeholder
/ items = stim_main_present
</text>
<item stim_main_present>
/ 1 = "    TARGET PRESENT   "
/ 2 = "    TARGET PRESENT   "
/ 3 = "    TARGET PRESENT   "
/ 4 = "    TARGET PRESENT   "
/ 5 = "    TARGET PRESENT   "
/ 6 = "    TARGET PRESENT   "
/ 7 = "    TARGET PRESENT   "
/ 8 = "    TARGET PRESENT   "
/ 9 = "    TARGET PRESENT   "
/10 = "    TARGET PRESENT   "
/ 11 = "    TARGET PRESENT   "
/ 12 = "    TARGET PRESENT   "
/ 13 = "    TARGET PRESENT   "
/ 14 = "    TARGET PRESENT   "
/ 15 = "    TARGET PRESENT   "
/ 16 = "    TARGET PRESENT   "
/ 17 = "    TARGET PRESENT   "
/ 18 = "    TARGET PRESENT   "
/ 19 = "    TARGET PRESENT   "
/20 = "    TARGET PRESENT   "
/ 21 = "    TARGET PRESENT   "
/ 22 = "    TARGET PRESENT   "
/ 23 = "    TARGET PRESENT   "
/ 24 = "    TARGET PRESENT   "
/ 25 = "    TARGET PRESENT   "
/ 26 = "    TARGET PRESENT   "
/ 27 = "    TARGET PRESENT   "
/ 28 = "    TARGET PRESENT   "
/ 29 = "    TARGET PRESENT   "
/30 = "    TARGET PRESENT   "
/ 31 = "    TARGET PRESENT   "
/ 32 = "    TARGET PRESENT   "
</item>

<text stim_main_absent> // TODO replace placeholder
/ items = stim_main_absent
</text>
<item stim_main_absent>
/ 1 = "    TARGET ABSENT    "
/ 2 = "    TARGET ABSENT    "
/ 3 = "    TARGET ABSENT    "
/ 4 = "    TARGET ABSENT    "
/ 5 = "    TARGET ABSENT    "
/ 6 = "    TARGET ABSENT    "
/ 7 = "    TARGET ABSENT    "
/ 8 = "    TARGET ABSENT    "
</item>

<text stim_fixation>
/ items = ("+")
/ fontstyle = (parameters.fontfamily_default, parameters.fontsize_fixation, false, false, false, false, 5, 1)
/ position = (50%, 50%)
</text>

<text stim_mask> // TODO replace placeholder
/ items = ("mask")
</text>

<shape stim_blank> // TODO replace placeholder
/ shape = rectangle
/ color = parameters.background_color
/ size = (100%, 100%)
/ position = (50%, 50%)
</shape>

<text prompt_interblock_break> // TODO: add timer
/items = ("Nice job! You are halfway there. in 20 seconds, the next block will begin.")
</text>


// Define instructions and prompts
//	  General instructions
//	  response-specific instructions ("/")
//	  response-specific instructions ("z")
//	  feedback for correct/incorrect practice trials
<page instructions_intro> // TODO: write, move to htmlpage
Instructions (intro)
</page>

<page instructions_practice_slash> // TODO: write, move to htmlpage
Practice round. When you see a square or circle, press "/"
</page>

<page instructions_practice_z> // TODO: write, move to htmlpage
Practice round. When you see a square or circle, press "z"
</page>

<text incorrect_message>  
/ items = ("      INCORRECT      ")
/ txcolor = (255, 0, 0)
</text>

<text correct_message>  
/ items = ("     CORRECT     ")
/ txcolor = (0, 255, 0)
</text>

<page instructions_main_slash> // TODO: write, move to htmlpage
Get ready for the real experiment! When you see a square or circle, press "/"
</page>

<page instructions_main_z> // TODO: write, move to htmlpage



Get ready for the real experiment! When you see a square or circle, press "z"
</page>

<page instructions_end> // TODO: write, move to htmlpage
Instructions (intro)
</page>

// Define trial types (what stim are presented? Which responses are valid/correct?)
//	  instructions (keys for next, previous)
//    practice target-present ("/")
//	  practice target-absent ("/")
//	  main target-present ("/")
//    main target-absent ("/")
//    practice target-present ("z")
//	  practice target-absent ("z")
//	  main target-present ("z")
//    main target-absent ("z")
<instruct>
/ nextkey = ("n")
/ prevkey = ("p")
</instruct>

/ fixation_onset = 0
/ shape_onset = parameters.fixation_duration
/ blank_onset = parameters.fixation_duration + parameters.shape_duration
/ mask_onset = parameters.fixation_duration + parameters.shape_duration + parameters.blank_duration
/ iti_onset = parameters.fixation_duration + parameters.shape_duration + parameters.blank_duration + parameters.mask_duration

<trial practice_present_slash>
/ ontrialbegin = [
	trial.practice_present_slash.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.practice_present_slash.insertstimulustime(text.stim_practice_present, expressions.shape_onset); // 600ms: show stimulus
	
	trial.practice_present_slash.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.practice_present_slash.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.practice_present_slash.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("/")
/ correctresponse = ("/")
// TODO: Record responses with /ontrialend
</trial>

<trial practice_absent_slash>
/ ontrialbegin = [
	trial.practice_absent_slash.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.practice_absent_slash.insertstimulustime(text.stim_practice_absent, expressions.shape_onset); // 600ms: show stimulus
	
	trial.practice_absent_slash.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.practice_absent_slash.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.practice_absent_slash.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("/", noresponse)
/ correctresponse = (noresponse)
// TODO: Record responses with /ontrialend
</trial>

<trial practice_present_z>
/ ontrialbegin = [
	trial.practice_present_z.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.practice_present_z.insertstimulustime(text.stim_practice_present, expressions.shape_onset); // 600ms: show stimulus
	
	trial.practice_present_z.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.practice_present_z.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.practice_present_z.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("z")
/ correctresponse = ("z")
// TODO: Record responses with /ontrialend
</trial>

<trial practice_absent_z>
/ ontrialbegin = [
	trial.practice_absent_z.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.practice_present_z.insertstimulustime(text.stim_practice_absent, expressions.shape_onset); // 600ms: show stimulus
	
	trial.practice_absent_z.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.practice_absent_z.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.practice_absent_z.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("z", noresponse)
/ correctresponse = (noresponse)
// TODO: Record responses with /ontrialend
</trial>

<trial main_present_slash>
/ ontrialbegin = [
	trial.main_present_slash.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.main_present_slash.insertstimulustime(text.stim_main_present, expressions.shape_onset); // 600ms: show stimulus
	
	trial.main_present_slash.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.main_present_slash.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.main_present_slash.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("/")
/ correctresponse = ("/")
// TODO: Record responses with /ontrialend
</trial>

<trial main_absent_slash>
/ ontrialbegin = [
	trial.main_absent_slash.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.main_absent_slash.insertstimulustime(text.stim_main_absent, expressions.shape_onset); // 600ms: show stimulus
	
	trial.main_absent_slash.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.main_absent_slash.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.main_absent_slash.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("/", noresponse)
/ correctresponse = (noresponse)
// TODO: Record responses with /ontrialend
</trial>

<trial main_present_z>
/ ontrialbegin = [
	trial.main_present_z.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.main_present_z.insertstimulustime(text.stim_main_present, expressions.shape_onset); // 600ms: show stimulus
	
	trial.main_present_z.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.main_present_z.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.main_present_z.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("z")
/ correctresponse = ("z")
// TODO: Record responses with /ontrialend
</trial>

<trial main_absent_z>
/ ontrialbegin = [
	trial.main_absent_z.insertstimulustime(clearscreen, expressions.shape_onset); // 600ms: refresh screen
	trial.main_absent_z.insertstimulustime(text.stim_main_absent, expressions.shape_onset); // 600ms: show stimulus
	
	trial.main_absent_z.insertstimulustime(clearscreen, expressions.blank_onset); // 600+134ms: show blank
	
	trial.main_absent_z.insertstimulustime(text.stim_mask, expressions.mask_onset); // 600+134ms+256ms: show mask
    trial.main_absent_z.insertstimulustime(clearscreen, expressions.iti_onset); // 600+134ms+256ms: show blank (iti)
]

/ stimulustimes = [0 = stim_fixation]
/ beginresponsetime = parameters.fixation_duration
/ timeout = parameters.timeout
/ posttrialpause = parameters.iti

/ responseinterrupt = immediate
/ validresponse = ("z", noresponse)
/ correctresponse = (noresponse)
// TODO: Record responses with /ontrialend
</trial>

<trial interblock_break>
/ stimulusframes = [1 = prompt_interblock_break]
/ trialduration = 20000 // TODO: MOVE TO CONFIG (parameters.interblock_break_duration)
</trial>

// Define blocks
//    practice block ("/") (12 t-p, 4 t-a)
//	  main block ("/") (32 t-p, 8 t-a, times 2) 
//    practice block ("z") (12 t-p, 4 t-a)
//	  main block ("z") (32 t-p, 8 t-a, times 2)
<block practice_slash>
/ trials = [
	1-16 = noreplace(practice_present_slash, practice_absent_slash) // Make sure this randomly selects from full pool; if not, move logic.
	// How to present 12 present, 4 absent?
	// (a) Select without replacement on list of 12 present; list of 4 absent (does this work?)
	// (b) Predefine set of 16 stim, in one trial type. Randomly present those 16.
    // It might be harder to handle responses in (b).
	]
/ preinstructions = (instructions_practice_slash)
/ errormessage = (incorrect_message, parameters.feedback_duration)
/ correctmessage = (correct_message, parameters.feedback_duration)
</block>

<block practice_z>
/ trials = [
	1-16 = noreplace(practice_present_z, practice_absent_z)
	]
/ preinstructions = (instructions_practice_z)
/ errormessage = (incorrect_message, parameters.feedback_duration)
/ correctmessage = (correct_message, parameters.feedback_duration)
</block>

<block main_slash>
/ trials = [
	1-40 = noreplace(main_present_slash, main_absent_slash);
	// How to present 32 present, 8 absent?
	// (a) Select without replacement on list of 32 present; list of 8 absent (does this work?)
	// (b) Predefine set of 40 stim, in one trial type. Randomly present those 40.
	// It might be harder to handle responses in (b).
	41-80 = noreplace(main_present_slash, main_absent_slash) 
	]
/ preinstructions = (instructions_main_slash)
</block>

<block main_z>
/ trials = [
	1-40 = noreplace(main_present_z, main_absent_z);
	41-80 = noreplace(main_present_z, main_absent_z) 
	]
/ preinstructions = (instructions_main_z)
</block>

<block interblock_break>
/ trials = [1=interblock_break]
</block>

// Define experiment
// Order:
//	  General instructions
//	  response-specific instructions ("/")
//    practice block ("/") (12 t-p, 4 t-a)
//	  main block ("/") (32 t-p, 8 t-a, times 2) 
//	  response-specific instructions ("z")
//    practice block ("z") (12 t-p, 4 t-a)
//	  main block ("z") (32 t-p, 8 t-a, times 2)
// For 1/2 subjects, do "z" blocks first.
<expt>
/ subjects = (1 of 2) // Subjects who will respond with "/" first
// To automatically assign subject ID and group by odd/even, host on inquisit website.
// https://www.millisecond.com/support/docs/current/html/articles/websubjectnumbers.htm
/ preinstructions = (instructions_intro)
/ postinstructions = (instructions_end)
/ blocks = [
	1=practice_slash;
	2=main_slash;
	3=interblock_break;
	4=practice_z;
	5=main_z;
	]
</expt>

<expt>
/ subjects = (2 of 2) // Subjects who will respond with "z" first
/ preinstructions = (instructions_intro)
/ postinstructions = (instructions_end)
/ blocks = [
	1=practice_z;
	2=main_z;
	3=interblock_break;
	4=practice_slash;
	5=main_slash;
	]
</expt>


