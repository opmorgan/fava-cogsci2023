<usermanual>
___________________________________________________________________________________________________________________	

									GLOBAL LOCAL TASK - NAVON TASK
___________________________________________________________________________________________________________________

Script Author: Katja Borchert, Ph.D. (katjab@millisecond.com) for Millisecond Software, LLC
Date: 10-30-2013
last updated:  02-23-2022 by K. Borchert (katjab@millisecond.com) for Millisecond Software, LLC

Script Copyright © 02-23-2022 Millisecond Software

___________________________________________________________________________________________________________________
BACKGROUND INFO 	
___________________________________________________________________________________________________________________
This script implements the Navon Global Local Task; a test of perceptual processing of global
and local features of stimuli.

The implemented procedure is based on:

Navon, D. (1977). Forest Before Trees: The Precedence of Global Features in Visual Perception.
COGNITIVE PSYCHOLOGY, 9, 353-383.(Experiment3)

___________________________________________________________________________________________________________________
TASK DESCRIPTION	
___________________________________________________________________________________________________________________
Participants are briefly presented with letter shapes (e.g. H or S) that are made up of little
letter shapes (e.g. H or S). Some of these letters have the same global (overall shape) and 
local (individual building shapes) letters (e.g. an H that consists of Hs), and some have 
different global and local letters (e.g. an H that consists of Ss). In the global condition
participants are asked to respond to the global shape of the letter (e.g. press key H if the
global shape of the letter is an H regardless of individual building blocks); 
in the local condition participants are asked to respond to the local shapes of the letter 
(e.g. press H if the local building elements are Hs regardless of overall shape). 

___________________________________________________________________________________________________________________	
DURATION 
___________________________________________________________________________________________________________________	
the default set-up of the script takes appr. 35 minutes to complete

Note: the task duration can be shortened by running fewer blocks. Go to section Experiment and 
change the number of blocks run if needed.
___________________________________________________________________________________________________________________	
DATA FILE INFORMATION 
___________________________________________________________________________________________________________________
The default data stored in the data files are:

(1) Raw data file: 'globallocaltask_raw*.iqdat' (a separate file for each participant)

build:								The specific Inquisit version used (the 'build') that was run
computer.platform:					the platform the script was run on (win/mac/ios/android)
date, time: 						date and time script was run 
subject, group: 					with the current subject/groupnumber
session:							with the current session id

blockcode, blocknum:				the name and number of the current block (built-in Inquisit variable)
trialcode, trialnum: 				the name and number of the currently recorded trial (built-in Inquisit variable)
										Note: trialnum is a built-in Inquisit variable; it counts all trials run; even those
										that do not store data to the data file.
										
phase:								"practice" vs. "test" 
									Note: by default 2 (parameters.numberpracticeblocks) blocks in each condition are
								
									practice blocks
condition:							1 = Global; 2 = Local									
presentation_location:				stores the currently selected location the stimulus is presented in

consistency:						"consistent": global and local shapes are consistent (e.g. an H made of little Hs)
									"conflicting": global and local shapes are conflicting (e.g. an H made of little Ss)
									"neutral": global and local shapes are inconsistent but not conflicting as one element
								
							
stimulus:							stores the name of the current stimulus picture
stimulusitem:						presented stimuli in order of implementation
target:								'S' or 'H'

response:							the participant's response (scancode of response button)
										35 = H
										31 = S
										("O") has no response button attached to it (e.g. an H made of little "Os")										
																				
correct:							the correctness of the response (1 = correct; 0 = otherwise)
latency: 							the response latency (measured from onset of stimuli; in ms)
x_pos:								the horizontal x-coordinate (in canvas %) depending on values.presentation_location
y_pos: 								the vertical y-coordinate (in canvas %) depending on values.presentation_location


(2) Summary data file: 'globallocaltask_summary*.iqdat' (a separate file for each participant)

inquisit.version: 						Inquisit version run
computer.platform:					the platform the script was run on (win/mac/ios/android)
startdate:							date script was run
starttime:							time script was started
subjectid:							assigned subject id number
groupid:							assigned group id number
sessionid:							assigned session id number
elapsedtime:						time it took to run script (in ms); measured from onset to offset of script
completed:							0 = script was not completed (prematurely aborted); 
									1 = script was completed (all conditions run)
									
PropCorrect:						overall proportion correct responses									
meanRT:								overall mean latency (in ms) of correct responses
									
PropCorrect_consistent_global:		proportion correct responses in the consistent global condition
meanRT_consistent_global:			mean latency (in ms) of correct responses in the consistent global condition						
same for the remaining conditions

___________________________________________________________________________________________________________________	
EXPERIMENTAL SET-UP 
___________________________________________________________________________________________________________________
-2 conditions (global vs. local) tested within. Order is counterbalanced by groupnumber.
-3 consistencies (consistent vs. neutral vs. conflicting): 
		global and local shapes the same (congruent); 
		global and local shapes different (incongruent)
		neutral = control condition

*Blocks:
- per condition: 6 blocks of 36 trials  
	=> by default, the first 2 blocks of each condition are considered practice blocks
	=> altogether 8 test blocks of 36 trials = 288 trials total
- the 6 stimuli per condition (global: overall shapes S and H only; local: building elements S and H only) are presented
	6 times (random selection)
- the stimuli can be either presented randomly on one or the other side of the screen (default) or in the center of the screen 
	(if random; the two different sides that the stimuli can be presented in are randomly selected 18 times each.)

*Trial Sequence:
Beep (50ms) + Fixation Cross (500ms) -> Stimulus (parameters.stimulusduration) -> mask until response -> ITI: 3s
Latencies are measure from onset of stimulus. Participants are instructed to press either S or H.

___________________________________________________________________________________________________________________	
STIMULI
___________________________________________________________________________________________________________________
A)Letter Stimuli
- The letter stimuli used in this script were generated by Millisecond Software with the help of PowerPoint and
Paint.Net. 
	=> The height of the global shape = 7* the height of the individual local shapes
	=> The width of the global shape = 6* the width of the individual local shapes
There are 9 different stimuli: 3 global shapes (H, S, "O"*) and 3 local shapes (H, S, "O").
You are welcome to use these stimuli or substitute your own under 
section Editable Stimuli -> item.stims

* the actual shape was supposed to be a rectangle but Navon (1977) notes that it was referred to as an "O"
by participants

-Size of the Letters: the size of the letter stimuli can be fine-tuned for a particular display under
section Editable Parameters -> parameters.picturesize

B) Beep:
the beep was produced in Audacity

___________________________________________________________________________________________________________________	
INSTRUCTIONS 
___________________________________________________________________________________________________________________
This script provides html instruction pages that are not original to the task. 
Change instructions in the provided html documents.

___________________________________________________________________________________________________________________	
EDITABLE CODE 
___________________________________________________________________________________________________________________	
check below for (relatively) easily editable parameters, stimuli, instructions etc. 
Keep in mind that you can use this script as a template and therefore always "mess" with the entire code 
to further customize your experiment.

The parameters you can change are:

/responsekey1:						first response key (default: "H")
/responsekey2:						second response key (default: "S")

/picturesize:						height of the targets in screen height percentages (default: 20%)
											Notes: 		- Stimuli used in Experiment 3 were the same as in Experiment 2 - small size condition (Navon, 1977, p.369)
														- 'The size of the whole stimulus was the same as in Experiment 1' - small size condition (Navon, 1977, p.365)
														- 'The longest vertical diameter of each of the visual stimuli was 28 mm' 
														(50cm viewing distance) (Navon, 1977, p.362)	
														
/fontsize_fixation:					fontsize of the fixation mark in screen height percentages (default: 10%)

/stimulusduration:					presentation duration of the targets 
											Note: the original study (Navon, 1977) used an oscilloscope with a presentation time of 40ms.
											This script adapts the procedure to the computer and increases the presentation time
											(default: 100ms)
											
/fixationduration:					presentation duration of the fixation stimulus (default: 500ms)
/iti:								intertrialinterval (default: 3000ms)
/restduration:						duration of the resttrial after each block (default: 20000ms)

/numberofpracticeblocks:			the number of blocks in each condition that count as practice.
									Navon (1977) used the first 2 blocks in each condition as practice blocks.
									
/randomtargetlocation:				true = target is presented randomly in either side of the screen; 
											the two different screen locations that the stimuli can be presented in are randomly selected 18 times each. (default)
									false = target is presented in the center of the screen

Presentation coordinates:		    Navon (1977, p.369): "The distance between the center of any of the stimuli and the fixation point was 24 mm."
/xpos1 = 25%					
/xpos2 = 75%
/ypos1 = 50%
/ypos2 = 50%

</usermanual>


**************************************************************************************************************
**************************************************************************************************************
	EDITABLE PARAMETERS: change editable parameters here
**************************************************************************************************************
**************************************************************************************************************

<parameters>
/ responsekey1 = "H"
/ responsekey2 = "S"

/ picturesize = 20%
/ fontsize_fixation = 10%

/ stimulusduration = 100
/ fixationduration = 500
/ iti = 3000
/ restduration = 20000

/ numberpracticeblocks = 2

/ randomtargetlocation = true
/ xpos1 = 25%
/ xpos2 = 75%
/ ypos1 = 50%
/ ypos2 = 50%
</parameters>

**************************************************************************************************************
**************************************************************************************************************
	EDITABLE STIMULI: change editable stimuli here
**************************************************************************************************************
**************************************************************************************************************

Note: these stimuli were created by Millisecond Software using Paint.Net and PowerPoint.
They were crafted after the originals. 

<item stims>
/ 1 = "HH.png"
/ 2 = "HS.png"
/ 3 = "HRec.png"
/ 4 = "SH.png"
/ 5 = "SS.png"
/ 6 = "SRec.png"
/ 7 = "RecH.png"
/ 8 = "RecS.png"
/ 9 = "RecRec.png"
</item>

<item mask>
/ 1 = "Mask.png"
</item>

<item beep>
/ 1 = "Signal.wav"
</item>
**************************************************************************************************************
**************************************************************************************************************
	EDITABLE INSTRUCTIONS: change instructions here
**************************************************************************************************************
**************************************************************************************************************
Note: these instructions are not originals and are only examples. Customize.

<instruct>
/ fontstyle = ("Arial", 3.00%, false, false, false, false, 5, 1)
/ navigationbuttonfontstyle = ("Arial", 3.00%, false, false, false, false, 5, 1)
/ finishlabel = "press [space] to start"
/ nextlabel = "press [space] to continue"
/ screencolor = black
/ txcolor = white
</instruct>

<htmlpage intro1>
/ file = "generalintro1.html"
</htmlpage>

<htmlpage intro2>
/ file = "generalintro2.html"
</htmlpage>

<htmlpage globalinstruct>
/ file = "globalinstruct.html"
</htmlpage>

<htmlpage localinstruct>
/ file = "localinstruct.html"
</htmlpage>

<page end>
<center><br><br><br><br><br><br>
You have reached the end of the task.<br>
<h1>Thank you!</h1></center>
</page>

**************************************************************************************************************
								!!!REMAINING CODE: Customize after careful consideration only!!!
**************************************************************************************************************


**************************************************************************************************************
**************************************************************************************************************
	DEFAULTS
**************************************************************************************************************
**************************************************************************************************************
script requires Inquisit 6.5.2.0 or higher

<defaults>
/ canvasaspectratio = (4,3)
/ minimumversion = "6.5.2.0"
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/ txbgcolor = black
/ txcolor = white
/ screencolor = black
</defaults>

**************************************************************************************************************
**************************************************************************************************************
	DATA
**************************************************************************************************************
**************************************************************************************************************

Note: data file explanations under User Manual Information at the top

********************
raw data
********************

<data>
/ columns = (build, computer.platform, date, time, subject, group, session, blockcode, blocknum, 
trialcode, trialnum,  
values.phase, values.condition, values.presentation_location, values.consistency, values.stimulus, stimulusitem
values.target, response, correct, latency, expressions.x_pos, expressions.y_pos)
</data>

********************
summary data
********************

<summarydata>
/ columns = (inquisit.version, computer.platform, script.startdate, script.starttime, 
script.subjectid, script.groupid, script.sessionid, script.elapsedtime, 
script.completed,

expressions.PropCorrect, expressions.meanRT,
expressions.PropCorrect_consistent_global, expressions.meanrt_consistent_global,
expressions.PropCorrect_conflict_global, expressions.meanrt_conflict_global,
expressions.PropCorrect_neutral_global,expressions.meanrt_neutral_global,
expressions.PropCorrect_consistent_local, expressions.meanrt_consistent_local,
expressions.PropCorrect_conflict_local, expressions.meanrt_conflict_local,
expressions.PropCorrect_neutral_local, expressions.meanrt_neutral_local)
</summarydata>


**************************************************************************************************************
**************************************************************************************************************
	VALUES: automatically updated
**************************************************************************************************************
**************************************************************************************************************
                                    
/condition:							1 = Global Condition;  2 = Local Condition
/stim:								stores the itemnumber of the current stimulus picture
/stimulus:							stores the name of the current stimulus picture
/presentation_location:			    stores the currently selected location the stimulus is presented in
/counttrials:						counts the trials in a block
/countblocks_global:				counts the number of global blocks
/countblocks_local:					counts the number of local blocks
/phase:								"practice" vs. "test" 
									Note: by default 2 (parameters.numberpracticeblocks) blocks in each condition are
									practice blocks
/selectinstruction:					stores the itemnumber of the current instruction slide
/consistency:						"consistent": global and local shapes are consistent (e.g. an H made of little Hs)
									"conflicting": global and local shapes are conflicting (e.g. an H made of little Ss)
									"neutral": global and local shapes are inconsistent but not conflicting as one element
											("O") has no response button attached to it (e.g. an H made of little "Os")
/target:							'S' or 'H'

/count_corrConsistent_Global-
/count_corrNeutral_Local:			count of correct responses in each of the 6 different conditions

/SumRT_Consistent_Global-
/SumRT_Neutral_Local:				sum of the latencies to correct responses in each of the 6 different conditions

<values>
/ completed = 0
/ condition = 0
/ stim = 0
/ stimulus = ""
/ presentation_location = 0
/ counttrials = 0
/ countblocks_global = 0
/ countblocks_local = 0
/ phase = 0
/ selectinstruction = 0
/ consistency = ""
/ target = ""

/ count_corrConsistent_Global = 0
/ count_corrConflict_Global = 0
/ count_corrNeutral_Global = 0
/ count_corrConsistent_Local = 0
/ count_corrConflict_Local = 0
/ count_corrNeutral_Local = 0

/ SumRT_Consistent_Global = 0
/ SumRT_Conflict_Global = 0
/ SumRT_Neutral_Global = 0
/ SumRT_Consistent_Local = 0
/ SumRT_Conflict_Local = 0
/ SumRT_Neutral_Local = 0

</values>

**************************************************************************************************************
**************************************************************************************************************
	EXPRESSIONS
**************************************************************************************************************
**************************************************************************************************************

/x_pos:		sets the x-coordinate depending on values.presentation_location
/y_pos: 	sets the y-coordinate depending on values.presentation_location

/meanRT_consistent_global-
/meanRT_neutral_local:			mean latency of correct responses to the 6 different conditions

<expressions>
/ x_pos = {
	if (parameters.randomtargetlocation == false) 50%;
	else if (values.presentation_location == 1) parameters.xpos1; 
	else if (values.presentation_location == 2) parameters.xpos2;
	
}
/ y_pos = {
	if (parameters.randomtargetlocation == false) 50%;
	else if (values.presentation_location == 1) parameters.ypos1; 
	else if (values.presentation_location == 2) parameters.ypos2;
	
}

/PropCorrect = list.ACC.mean
/meanRT = list.RT.mean

/ meanRT_consistent_global = list.RT_Conflict_Global.mean
/ meanRT_conflict_global = list.RT_Conflict_Global.mean
/ meanRT_neutral_global = list.RT_Neutral_Global.mean
/ meanRT_consistent_local = list.RT_Conflict_local.mean
/ meanRT_conflict_local = list.RT_Conflict_local.mean
/ meanRT_neutral_local = list.RT_Neutral_local.mean
/ propCorrect_consistent_global = list.ACC_Conflict_Global.mean
/ propCorrect_conflict_global = list.ACC_Conflict_Global.mean
/ propCorrect_neutral_global = list.ACC_Neutral_Global.mean
/ propCorrect_consistent_local = list.ACC_Conflict_local.mean
/ propCorrect_conflict_local = list.ACC_Conflict_local.mean
/ propCorrect_neutral_local = list.ACC_Neutral_local.mean
</expressions>

**************************************************************************************************************
**************************************************************************************************************
	INSTRUCTIONS
**************************************************************************************************************
**************************************************************************************************************

<block generalinstructions>
/ preinstructions = (intro1, intro2)
</block>

<block GlobalInstruct>
/ preinstructions = (globalinstruct)
</block>

<block LocalInstruct>
/ preinstructions = (localinstruct)
</block>

**************************************************************************************************************
**************************************************************************************************************
	STIMULI
**************************************************************************************************************
**************************************************************************************************************

<picture target>
/ items = stims
/ select = values.stim
/ position = (expressions.x_pos, expressions.y_pos)
/ size = (parameters.picturesize, parameters.picturesize)
</picture>

<picture mask>
/ items = mask
/ select = 1
/ position = (expressions.x_pos, expressions.y_pos)
/ size = (parameters.picturesize, parameters.picturesize)
</picture>

<text fixation>
/ items = ("+")
/ fontstyle = ("Arial", parameters.fontsize_fixation, false, false, false, false, 5, 1)
/ txcolor = white
/ txbgcolor = black
/ position = (50%, 50%)
</text>

<sound signal>
/ items = beep
/ select = 1
</sound>

<clock resttimer>
/ mode = timer
/ resetrate = block
/ erase = false
/ txcolor = yellow
/ txbgcolor = black
/ timeout = parameters.restduration
/ position = (50%, 50%)
/ format = "mm:ss"
/ fontstyle = ("Arial", 15%, false, false, false, false, 5, 1)
</clock>

**************************************************************************************************************
**************************************************************************************************************
	LISTS	
**************************************************************************************************************
**************************************************************************************************************
Note: controls the selection of the 6 stims for the Gobal Condition
(item list contain the possible itemnumbers)
<list stimitemnumber_GlobalCondition>
/ items = (1, 2, 3, 4, 5, 6)
/ poolsize = 36
/ replace = false
/ resetinterval = 1
</list>

Note: controls the selection of the 6 stims for the Local Condition
(item list contain the possible itemnumbers)
<list stimitemnumber_LocalCondition>
/ items = (1, 2, 4, 5, 7, 8)
/ poolsize = 

/ replace = false
/ resetinterval = 1
</list>

// Updating this section to use screen halves instead of quadrants
Note: randomly selects (without replacement) one of n locations for stimulus presentation
(Specified in variables xpos1, xpos2, ypos1, ypos3, used by x_pos, y_pos)
<list presentation_location>
/ items = (1, 2)
/ poolsize = 36
/ replace = false
/ resetinterval = 1
</list>

*************************************************
Data Lists: used for descriptive statistics
store correct latencies/accuracy data
fill up during runtime
*************************************************

Note: list stores 1 = correct response; 0 = incorrect response for each relevant trial
any response coded as an error is automatically coded as 0
<list ACC>
</list>

Note: list stores the latency of correct responses for each relevant trial
<list RT>
</list>

<list ACC_Consistent_Global>
</list>

<list ACC_Conflict_Global>
</list>

<list ACC_Neutral_Global>
</list>

<list ACC_Consistent_Local>
</list>

<list ACC_Conflict_Local>
</list>

<list ACC_Neutral_Local>
</list>

<list RT_Consistent_Global>
</list>

<list RT_Conflict_Global>
</list>

<list RT_Neutral_Global>
</list>

<list RT_Consistent_Local>
</list>

<list RT_Conflict_Local>
</list>

<list RT_Neutral_Local>
</list>



**************************************************************************************************************
**************************************************************************************************************
	TRIALS 	
**************************************************************************************************************
**************************************************************************************************************

Note:
- trials randomly selects the next stimulus
- it presents a beeb and a fixation cross followed by the target and target mask
- latencies are measured from stimulus onset
- updates summary variables

<trial global>
/ ontrialbegin = [
	values.counttrials += 1;
	values.stim = list.stimitemnumber_globalcondition.nextvalue;
	if (values.stim < 4){
		values.target = "H";
	} else if (values.stim < 9) {
		values.target = "S";
	} else {
		values.target = "";
	};
	values.presentation_location = list.presentation_location.nextvalue;
	trial.global.insertstimulustime(clearscreen, parameters.fixationduration);
	trial.global.insertstimulustime(picture.target, parameters.fixationduration);
	trial.global.insertstimulustime(picture.mask, (parameters.fixationduration + parameters.stimulusduration));
]

/ stimulustimes = [0 = fixation, signal]
/ beginresponsetime = parameters.fixationduration
/ responseinterrupt = immediate
/ validresponse = (parameters.responsekey1, parameters.responsekey2)
/ iscorrectresponse = [(values.stim <= 3 && trial.global.responsetext == parameters.responsekey1) || (values.stim > 3 && trial.global.responsetext == parameters.responsekey2)] 
/ ontrialend = [
	trial.global.resetstimulusframes();
	values.stimulus = picture.target.currentitem;
	
	if (values.stim == 1 || values.stim == 5 || values.stim == 9){
		values.consistency = "consistent";
	} else if (values.stim == 2 || values.stim == 4){
		values.consistency = "conflicting";
	} else {
		values.consistency = "neutral";
	};
	
	if (values.phase == "test"){
		list.ACC.appenditem(trial.global.correct);
		if (values.consistency=="neutral") {
			list.ACC_Neutral_Global.appenditem(trial.global.correct);
			if (trial.global.correct){
				list.RT_Neutral_Global.appenditem(trial.global.latency);
			};
		} else if (values.consistency == "consistent") {
			list.ACC_Consistent_Global.appenditem(trial.global.correct);
			if (trial.global.correct){
				list.RT_Consistent_Global.appenditem(trial.global.latency);
			};
		} else {
			list.ACC_Conflict_Global.appenditem(trial.global.correct);
			if (trial.global.correct){		
				list.RT_Conflict_Global.appenditem(trial.global.latency);
			};
		};
	};
]
/ posttrialpause = parameters.iti
/ recorddata = true
</trial>

<trial local>
/ ontrialbegin = [
	values.counttrials += 1;
	values.stim = list.stimitemnumber_localcondition.nextvalue;
	if (values.stim == 1 || values.stim == 4 || values.stim == 7){
		values.target = "H";
	} else if (values.stim == 2 || values.stim == 5 || values.stim == 8){
		values.target = "S";
	} else {
		values.target = "";
	};
	values.presentation_location = list.presentation_location.nextvalue;

	trial.local.insertstimulustime(clearscreen, parameters.fixationduration);
	trial.local.insertstimulustime(picture.target, parameters.fixationduration);
	trial.local.insertstimulustime(picture.mask, (parameters.fixationduration + parameters.stimulusduration));
				
]

/ stimulustimes = [0 = fixation, signal]
/ beginresponsetime = parameters.fixationduration
/ responseinterrupt = immediate
/ validresponse = (parameters.responsekey1, parameters.responsekey2)
/ monkeyresponse = (31, 35)

/ iscorrectresponse = [((values.stim == 1 || values.stim == 4 || values.stim == 7) && trial.local.responsetext == parameters.responsekey1) || ((values.stim == 2 || values.stim == 5 || values.stim == 8) && trial.local.responsetext == parameters.responsekey2)] 
/ ontrialend = [
	trial.local.resetstimulusframes();

	values.stimulus = picture.target.currentitem;
	if (values.stim == 1 || values.stim == 5 || values.stim == 9){
		values.consistency = "consistent";
	} else if (values.stim == 2 || values.stim == 4){
		values.consistency = "conflicting";
	} else if (values.stim == 3 || values.stim == 6 || values.stim == 7 || values.stim == 8){
		values.consistency = "neutral";
	};
	
	if (values.phase == "test"){
		list.ACC.appenditem(trial.local.correct);
		if (values.consistency=="neutral") {
			list.ACC_Neutral_local.appenditem(trial.local.correct);
			if (trial.local.correct){
				list.RT_Neutral_local.appenditem(trial.local.latency);
			};
		} else if (values.consistency == "consistent") {
			list.ACC_Consistent_local.appenditem(trial.local.correct);
			if (trial.local.correct){
				list.RT_Consistent_local.appenditem(trial.local.latency);
			};
		} else {
			list.ACC_Conflict_local.appenditem(trial.local.correct);
			if (trial.local.correct){		
				list.RT_Conflict_local.appenditem(trial.local.latency);
			};
		};
	};
]					
/ posttrialpause = parameters.iti
/ recorddata = true
</trial>


<trial rest>
/ skip = [(script.currentblock == "Global" && values.countblocks_global == 6) || (script.currentblock == "Local" && values.countblocks_local == 6)]
/ stimulusframes = [1 = resttimer]
/ timeout = clock.resttimer.timeout
/ recorddata = true
</trial>

**************************************************************************************************************
**************************************************************************************************************
	BLOCKS
**************************************************************************************************************
**************************************************************************************************************

Note:

1 = condition Global
2 = condition Local

the first 2 blocks of each condition are considered practice.

<block Global>
/ onblockbegin = [
	values.condition = 1;
	values.counttrials = 0;
	values.countblocks_global += 1;
]
/ onblockbegin = [
	if (values.countblocks_global <= parameters.numberpracticeblocks){
		values.phase = "practice";
	} else {
		values.phase = "test";
	};
]
/ trials = [
	1-36 = global; 
	37 = rest;
]
</block>

<block Local>
/ onblockbegin = [
	values.condition = 2;
	values.counttrials = 0;
	values.countblocks_local += 1;
]
/ onblockbegin = [
	if (values.countblocks_local <= parameters.numberpracticeblocks){
		values.phase = "practice"; 
	} else {
		values.phase = "test";
	};
]
/ trials = [
	1-36 = local; 
	37 = rest;
]
</block>

**************************************************************************************************************
**************************************************************************************************************
	EXPERIMENT 
**************************************************************************************************************
**************************************************************************************************************

Note: Order of Global/Local blocks is counterbalanced by groupnumber

<expt>
/ postinstructions = (end)
/groups = (1 of 2)
/ blocks = [
	1 = generalinstructions; 
	2 = GlobalInstruct; 
	3-8 = Global; 
	9 = LocalInstruct; 
	10-15 = Local;
]
</expt>

Note: to change the number of blocks from 6 per condition to 2 per condition (for example) use:
/ blocks = [
	1 = generalinstructions; 
	2 = GlobalInstruct; 
	3-4 = Global; 
	5 = LocalInstruct; 
	6-7 = Local;
]


<expt>
/ postinstructions = (end)
/groups = (2 of 2)
/ blocks = [
	1 = generalinstructions; 
	2 = LocalInstruct; 
	3-8 = Local; 
	9 = GlobalInstruct; 
	10-15 = Global;
]
</expt>
				